// This file is used by Code Analysis to maintain SuppressMessage
// attributes that are applied to this project.
// Project-level suppressions either have no target or are given
// a specific target and scoped to a namespace, type, member, etc.

[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'IEnumerable<BaseClaim> StandardClaims.TransformRoleClaims(List<string> roles)', validate parameter 'roles' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Entities.StandardClaims.TransformRoleClaims(System.Collections.Generic.List{System.String})~System.Collections.Generic.IEnumerable{LetPortal.Identity.Entities.BaseClaim}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'ILetPortalBuilder IdentityExtensions.AddIdentity(ILetPortalBuilder builder)', validate parameter 'builder' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.IdentityExtensions.AddIdentity(LetPortal.Core.ILetPortalBuilder)~LetPortal.Core.ILetPortalBuilder")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'BaseClaim IdentityExtensions.ToBaseClaim(Claim claim)', validate parameter 'claim' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.IdentityExtensions.ToBaseClaim(System.Security.Claims.Claim)~LetPortal.Identity.Entities.BaseClaim")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Claim IdentityExtensions.ToClaim(BaseClaim baseClaim)', validate parameter 'baseClaim' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.IdentityExtensions.ToClaim(LetPortal.Identity.Entities.BaseClaim)~System.Security.Claims.Claim")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1305:The behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings. Replace this call in 'InternalIdentityServiceProvider.ForgotPasswordAsync(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Providers.Identity.InternalIdentityServiceProvider.ForgotPasswordAsync(System.String)~System.Threading.Tasks.Task")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1303:Method 'ClaimsPrincipal InternalIdentityServiceProvider.GetPrincipalFromExpiredToken(string token)' passes a literal string as parameter 'message' of a call to 'SecurityTokenException.SecurityTokenException(string message)'. Retrieve the following string(s) from a resource table instead: \"Invalid token\".", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Providers.Identity.InternalIdentityServiceProvider.GetPrincipalFromExpiredToken(System.String)~System.Security.Claims.ClaimsPrincipal")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task InternalIdentityServiceProvider.RecoveryPasswordAsync(RecoveryPasswordModel recoveryPasswordModel)', validate parameter 'recoveryPasswordModel' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Providers.Identity.InternalIdentityServiceProvider.RecoveryPasswordAsync(LetPortal.Identity.Models.RecoveryPasswordModel)~System.Threading.Tasks.Task")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task InternalIdentityServiceProvider.RegisterAsync(RegisterModel registerModel)', validate parameter 'registerModel' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Providers.Identity.InternalIdentityServiceProvider.RegisterAsync(LetPortal.Identity.Models.RegisterModel)~System.Threading.Tasks.Task")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<TokenModel> InternalIdentityServiceProvider.SignInAsync(LoginModel loginModel)', validate parameter 'loginModel' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Providers.Identity.InternalIdentityServiceProvider.SignInAsync(LetPortal.Identity.Models.LoginModel)~System.Threading.Tasks.Task{LetPortal.Identity.Models.TokenModel}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1303:Method 'Task<TokenModel> InternalIdentityServiceProvider.SignInAsync(LoginModel loginModel)' passes a literal string as parameter 'message' of a call to 'void IServiceLogger<InternalIdentityServiceProvider>.Info(string message, params object[] logObjects)'. Retrieve the following string(s) from a resource table instead: \"User Login {$loginModel}\".", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Providers.Identity.InternalIdentityServiceProvider.SignInAsync(LetPortal.Identity.Models.LoginModel)~System.Threading.Tasks.Task{LetPortal.Identity.Models.TokenModel}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'void LetPortalIdentityDbContext.OnModelCreating(ModelBuilder modelBuilder)', validate parameter 'modelBuilder' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Repositories.LetPortalIdentityDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task RoleStore.AddClaimAsync(Role role, Claim claim, CancellationToken cancellationToken = default(CancellationToken))', validate parameter 'role' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.RoleStore.AddClaimAsync(LetPortal.Identity.Entities.Role,System.Security.Claims.Claim,System.Threading.CancellationToken)~System.Threading.Tasks.Task")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<IdentityResult> RoleStore.CreateAsync(Role role, CancellationToken cancellationToken)', validate parameter 'role' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.RoleStore.CreateAsync(LetPortal.Identity.Entities.Role,System.Threading.CancellationToken)~System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<IdentityResult> RoleStore.DeleteAsync(Role role, CancellationToken cancellationToken)', validate parameter 'role' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.RoleStore.DeleteAsync(LetPortal.Identity.Entities.Role,System.Threading.CancellationToken)~System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<IList<Claim>> RoleStore.GetClaimsAsync(Role role, CancellationToken cancellationToken = default(CancellationToken))', validate parameter 'role' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.RoleStore.GetClaimsAsync(LetPortal.Identity.Entities.Role,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<string> RoleStore.GetNormalizedRoleNameAsync(Role role, CancellationToken cancellationToken)', validate parameter 'role' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.RoleStore.GetNormalizedRoleNameAsync(LetPortal.Identity.Entities.Role,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.String}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<string> RoleStore.GetRoleIdAsync(Role role, CancellationToken cancellationToken)', validate parameter 'role' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.RoleStore.GetRoleIdAsync(LetPortal.Identity.Entities.Role,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.String}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<string> RoleStore.GetRoleNameAsync(Role role, CancellationToken cancellationToken)', validate parameter 'role' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.RoleStore.GetRoleNameAsync(LetPortal.Identity.Entities.Role,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.String}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task RoleStore.RemoveClaimAsync(Role role, Claim claim, CancellationToken cancellationToken = default(CancellationToken))', validate parameter 'role' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.RoleStore.RemoveClaimAsync(LetPortal.Identity.Entities.Role,System.Security.Claims.Claim,System.Threading.CancellationToken)~System.Threading.Tasks.Task")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task RoleStore.SetNormalizedRoleNameAsync(Role role, string normalizedName, CancellationToken cancellationToken)', validate parameter 'role' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.RoleStore.SetNormalizedRoleNameAsync(LetPortal.Identity.Entities.Role,System.String,System.Threading.CancellationToken)~System.Threading.Tasks.Task")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task RoleStore.SetRoleNameAsync(Role role, string roleName, CancellationToken cancellationToken)', validate parameter 'role' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.RoleStore.SetRoleNameAsync(LetPortal.Identity.Entities.Role,System.String,System.Threading.CancellationToken)~System.Threading.Tasks.Task")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<IdentityResult> RoleStore.UpdateAsync(Role role, CancellationToken cancellationToken)', validate parameter 'role' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.RoleStore.UpdateAsync(LetPortal.Identity.Entities.Role,System.Threading.CancellationToken)~System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task UserStore.AddClaimsAsync(User user, IEnumerable<Claim> claims, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.AddClaimsAsync(LetPortal.Identity.Entities.User,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)~System.Threading.Tasks.Task")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task UserStore.AddToRoleAsync(User user, string roleName, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.AddToRoleAsync(LetPortal.Identity.Entities.User,System.String,System.Threading.CancellationToken)~System.Threading.Tasks.Task")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1303:Method 'Task UserStore.AddToRoleAsync(User user, string roleName, CancellationToken cancellationToken)' passes a literal string as parameter 'message' of a call to 'InvalidOperationException.InvalidOperationException(string message)'. Retrieve the following string(s) from a resource table instead: \"User has already registered with Role\".", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.AddToRoleAsync(LetPortal.Identity.Entities.User,System.String,System.Threading.CancellationToken)~System.Threading.Tasks.Task")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<IdentityResult> UserStore.CreateAsync(User user, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.CreateAsync(LetPortal.Identity.Entities.User,System.Threading.CancellationToken)~System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<IdentityResult> UserStore.DeleteAsync(User user, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.DeleteAsync(LetPortal.Identity.Entities.User,System.Threading.CancellationToken)~System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<int> UserStore.GetAccessFailedCountAsync(User user, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.GetAccessFailedCountAsync(LetPortal.Identity.Entities.User,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.Int32}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<IList<Claim>> UserStore.GetClaimsAsync(User user, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.GetClaimsAsync(LetPortal.Identity.Entities.User,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<string> UserStore.GetEmailAsync(User user, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.GetEmailAsync(LetPortal.Identity.Entities.User,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.String}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<bool> UserStore.GetEmailConfirmedAsync(User user, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.GetEmailConfirmedAsync(LetPortal.Identity.Entities.User,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.Boolean}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<bool> UserStore.GetLockoutEnabledAsync(User user, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.GetLockoutEnabledAsync(LetPortal.Identity.Entities.User,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.Boolean}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<DateTimeOffset?> UserStore.GetLockoutEndDateAsync(User user, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.GetLockoutEndDateAsync(LetPortal.Identity.Entities.User,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.Nullable{System.DateTimeOffset}}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<string> UserStore.GetNormalizedEmailAsync(User user, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.GetNormalizedEmailAsync(LetPortal.Identity.Entities.User,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.String}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<string> UserStore.GetNormalizedUserNameAsync(User user, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.GetNormalizedUserNameAsync(LetPortal.Identity.Entities.User,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.String}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<string> UserStore.GetPasswordHashAsync(User user, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.GetPasswordHashAsync(LetPortal.Identity.Entities.User,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.String}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<IList<string>> UserStore.GetRolesAsync(User user, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.GetRolesAsync(LetPortal.Identity.Entities.User,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.Collections.Generic.IList{System.String}}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<string> UserStore.GetSecurityStampAsync(User user, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.GetSecurityStampAsync(LetPortal.Identity.Entities.User,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.String}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<string> UserStore.GetUserIdAsync(User user, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.GetUserIdAsync(LetPortal.Identity.Entities.User,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.String}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<string> UserStore.GetUserNameAsync(User user, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.GetUserNameAsync(LetPortal.Identity.Entities.User,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.String}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<bool> UserStore.HasPasswordAsync(User user, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.HasPasswordAsync(LetPortal.Identity.Entities.User,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.Boolean}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<int> UserStore.IncrementAccessFailedCountAsync(User user, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.IncrementAccessFailedCountAsync(LetPortal.Identity.Entities.User,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.Int32}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<bool> UserStore.IsInRoleAsync(User user, string roleName, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.IsInRoleAsync(LetPortal.Identity.Entities.User,System.String,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.Boolean}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task UserStore.RemoveClaimsAsync(User user, IEnumerable<Claim> claims, CancellationToken cancellationToken)', validate parameter 'claims' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.RemoveClaimsAsync(LetPortal.Identity.Entities.User,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)~System.Threading.Tasks.Task")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task UserStore.ResetAccessFailedCountAsync(User user, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.ResetAccessFailedCountAsync(LetPortal.Identity.Entities.User,System.Threading.CancellationToken)~System.Threading.Tasks.Task")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task UserStore.SetEmailAsync(User user, string email, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.SetEmailAsync(LetPortal.Identity.Entities.User,System.String,System.Threading.CancellationToken)~System.Threading.Tasks.Task")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task UserStore.SetEmailConfirmedAsync(User user, bool confirmed, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.SetEmailConfirmedAsync(LetPortal.Identity.Entities.User,System.Boolean,System.Threading.CancellationToken)~System.Threading.Tasks.Task")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task UserStore.SetLockoutEnabledAsync(User user, bool enabled, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.SetLockoutEnabledAsync(LetPortal.Identity.Entities.User,System.Boolean,System.Threading.CancellationToken)~System.Threading.Tasks.Task")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task UserStore.SetLockoutEndDateAsync(User user, DateTimeOffset? lockoutEnd, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.SetLockoutEndDateAsync(LetPortal.Identity.Entities.User,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)~System.Threading.Tasks.Task")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task UserStore.SetNormalizedEmailAsync(User user, string normalizedEmail, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.SetNormalizedEmailAsync(LetPortal.Identity.Entities.User,System.String,System.Threading.CancellationToken)~System.Threading.Tasks.Task")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task UserStore.SetNormalizedUserNameAsync(User user, string normalizedName, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.SetNormalizedUserNameAsync(LetPortal.Identity.Entities.User,System.String,System.Threading.CancellationToken)~System.Threading.Tasks.Task")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task UserStore.SetPasswordHashAsync(User user, string passwordHash, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.SetPasswordHashAsync(LetPortal.Identity.Entities.User,System.String,System.Threading.CancellationToken)~System.Threading.Tasks.Task")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task UserStore.SetSecurityStampAsync(User user, string stamp, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.SetSecurityStampAsync(LetPortal.Identity.Entities.User,System.String,System.Threading.CancellationToken)~System.Threading.Tasks.Task")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task UserStore.SetUserNameAsync(User user, string userName, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.SetUserNameAsync(LetPortal.Identity.Entities.User,System.String,System.Threading.CancellationToken)~System.Threading.Tasks.Task")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Task<IdentityResult> UserStore.UpdateAsync(User user, CancellationToken cancellationToken)', validate parameter 'user' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:LetPortal.Identity.Stores.UserStore.UpdateAsync(LetPortal.Identity.Entities.User,System.Threading.CancellationToken)~System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1052:Type 'JwtClaimTypes' is a static holder type but is neither static nor NotInheritable", Justification = "<Pending>", Scope = "type", Target = "~T:LetPortal.Identity.Entities.JwtClaimTypes")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1052:Type 'StandardClaims' is a static holder type but is neither static nor NotInheritable", Justification = "<Pending>", Scope = "type", Target = "~T:LetPortal.Identity.Entities.StandardClaims")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1052:Type 'ErrorCodes' is a static holder type but is neither static nor NotInheritable", Justification = "<Pending>", Scope = "type", Target = "~T:LetPortal.Identity.Exceptions.ErrorCodes")]
